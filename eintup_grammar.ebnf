scalar : array_elem 
       | number
       | RANK ( index_expr_list )

scalar_expr : (* See Arithmetic Expression, using 'scalar' as 'unit' *)

assign : array_elem "=" scalar_expr

array_elem : array_name [ index_expr_list ]
array_slice: array_name [ sliced_index_expr_list ]

index  : integer
       | eintup
       | DIMS ( index_expr_list )
       | RANK ( index_expr_list )
       | FLAT ( index_expr_list )
       | array_slice
       | index_expr

index_expr : (* See Arithmetic Expression, using 'index' as 'unit' *)

index_expr_list : index_expr
                | index_expr_list , index_expr

(* This ensures there will be exactly one ':' in the list *)
sliced_index_expr_list : ":"
                       | index_expr_list , ":"
                       | sliced_index_expr_list , index_expr

(* Arithmetic Expression - Arithmetic Combinator to generate scalar_expr from
scalar, and index_expr from index.  Substitute in 'scalar' or 'index' for
'unit' below.

Taken from https://sly.readthedocs.io/en/latest/sly.html#writing-a-parser *)

expr : term
     | expr { +,- } term

term : factor
     | term { *, //, //^, % } factor

factor : unit
       | ( expr )

(* Notes:

'//^' is truncating upwards (a //^ b == ceiling(a / b))

*)
       
(* Constraints - Both rcons and dcons will be used as base units to build 
rcons_expr and dcons_expr binary arithmetic expressions.  *)

rcons : integer
      | RANK ( tup )


dcons : integer
      | DIMS ( tup )
      | RANK ( tup )

