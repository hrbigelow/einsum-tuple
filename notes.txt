TODO: checks for zero-sized dimensions which cause the error:
2022-07-05 14:35:35.070113: F ./tensorflow/core/util/gpu_launch_config.h:129] Check failed: work_element_count > 0 (0 vs. 0)
TODO: check for GPU availability - either refuse to run on CPU, or implement
some filtering step for out-of-bounds when scatter_nd or gather_nd must be
used.
TODO: fix parsing error of confusion between unary and binary +/-


Concepts

A 'Signature' of a Tensor is an enriched version of the notion of shape.
Whereas a shape is an ordered list of tensor dimension sizes, such as
[2,4,100,50,3], a 'signature' is a named contiguous grouping of such
dimensions, like:  { 'batch': [2,4], 'slice': [100, 50], 'coord': [3] }.
The object which stores the name and sub-shape is called the EinTup (Einstein
Tuple), and its Shape object is a container for a shape (both dimension sizes
and its rank) managed globally through the Config object.

Config::array_sig has entries representing each array.  The key is the array
name, and the value is a list of EinTups representing the signature.  During
evaluation, these EinTups are passed around through several functions to
support transpose, broadcasting, reshaping up to the signature level (one
dimension per named EinTup) or down to the individual dimension level (one
dimension per element in a EinTup shape)

It is possible for multiple EinTups to hold the same Shape instance.  This is
because, if a particular EinTup identifier is used in the context where another
one was previously defined, such as in the expression:

mat[a] = RANDOM(0, 10, FLOAT)
res[a,b] = mat[a] * mat[b]

The identifier 'b' is now used as the first index argument of array 'mat', and
so will automatically share the same shape as EinTup 'a'.  However, it will
define a separate set of dimensions for 'res' (although the dimensions are the
same shape), enabling easily generating cartesian products.

The functions AST::evaluate, flat_dims, get_inds, get_cardinality,
layout_to_sig all take / return lists of EinTups.

Array Assignment

The top-level statements in the Einsum Tuple language are all array
assignments, of the form:

lval_array = rval_expr
lval_array += rval_expr

In order to evaluate the first (assignment) form, the runtime must achieve the
following logical effect:

0. assign 0 to all elements of the left hand side array

1. determine the *set* (not counting duplicates) of all EinTups appearing as
variables in an index expression on the left or right hand side.  Note that an
EinTup that occurs inside a DIMS() or RANK() call is not a variable.

2. enumerate the total set of combined values (the cartesian product) of the
EinTups

3. for each tup value set, compute the values for all index expressions.  if
any component of any index expression is out of bounds with respect to that
array's signature (runtime.array_sig), skip steps 4-6.

4. for each index expression value set, access the value of the array elements
on the right hand side

5. compute the value of the right hand side expression from the values of the
array elements

6. add this value to the left hand side array element identified by the index
expression list.


For the second (accumulation) form, do the same, except skip step 0.

The actual algorithm used to carry out these logical steps is as follows:

For the first (assignment) form.  If lval_array index_expr_list has only simple
EinTups:

1. determine the set of all EinTups appearing as variables in lval_array

2. call val = rhs.evaluate(lval_call).  This evaluates rval_expr, then
marginalizes out any right-only Eintups, and broadcasts the quantity across any
left-only EinTups.

3. trim or pad each dimension as necessary to fit lhs.get_sig().  If val's
dimension is greater, trim it.  If less, pad with zero.  This is
util.fit_to_size()

If lval_array index_expr_list has any index expressions, the
lhs._evaluate_sliced() function must be used.  


Automatic Rank Equivalence Constraints

Whenever two of either EinTupSlice or DimsSlice instances appear together in an
index expression, their ranks must match.  Instead of requiring the user to
specify rank equivalence constraints for such cases, we infer them from the
index expressions.

The approach is to inspect each complex index expression appearing anywhere in the
program, which will be a SliceBinOp.  Then, traverse the SliceBinOp to collect
all EinTupSlice and DimsSlice instances.  From there, extract the set of all
tups.  Then, order them in dictionary order by name.  Add the first tup as a
rank constraint to all the subsequent tups.



SliceExpr

An expression to be used as an element in an Array index list.  The slice
expression represents a hyperrectangular set, whose shape is defined by the
'basis'.  The elements in the set are tuples which take on values in a certain
range.  The upper limits (exclusive) of the range are given by
SliceExpr::dims().

elements of subtractive SliceExpr's like 'ipos - opos' can take on negative
values.  Any such element is ignored.

The calculation of an Array (either LValue or RValueArray) using either naked
EinTups or SliceExpr's can be thought of as follows:

First of all, the naked EinTup can be thought of as a trivial SliceExpr in
which each tuple element value is equal to its location in the hyperrectangular
set:  that is, if 'se' is the SliceExpr, then se[a,b,c] = [a,b,c] for example.

Then, the sets are broadcasted according to the union of all EinTups appearing
in all SliceExprs.  The hyperrectangular set induced by this union of EinTups
then defines the shape of the final output.  Each element of the union set
identifies an element of each SliceExpr set.  All such elements are then
concatenated to produce a tuple whose rank is the same as the outer Array index
list.  This is then used to retrieve the value from the outer array and it then
populates the return array with that scalar value.

The elements of a ShapeExpr have a predictable upper bound (exclusive) for each
component.  For simple EinTups, upper bounds are given directly by the dims()
function.  For other expressions, the upper bounds can be calculated (for
various combinations) as:

(a.dims() - 1) + (b.dims() - 1) + 1
(a.dims() - 1) * (b.dims() - 1) + 1
(a.dims() - 1) // Int + 1
(a.dims() - 1) * Int + 1
(a.dims() - 1) //^ Int + 1

min(a.dims(), rhs)


An ordinary Array is also a hyperrectangular set, whose shape is defined by the
array signature.  But, the elements are individual scalars (int or float).

The individual elements of the slice expression are meant to supply the value
for a particular index.  


ShapeExpr

A ShapeExpr is the base class for anything that can be used to define a
signature.  to_sig expects src_sig and trg_sig to have only ShapeExpr
instances.

A SliceExpr can be used in place of an eintup name in array index lists.  The
SliceExpr has a signature of basis + [rank_sig].  rank_sig is a rank-1
ShapeExpr such as [4].  Conceptually, this means that the SliceExpr can be used
in a rank-4 location (that is, an array index entry of rank 4.  That's why it
is called the rank_sig.


Constraint Grammar and Logic

See parse.py:110-201.  Here are some examples

RANK(tup) = 3
RANK(tup) IN [3,5]
RANK(tup) = RANK(batch) + RANK(chan)
RANK(tup) = RANK(batch) + 2

DIMS(tup) IN [2,10]
DIMS(tup) = 4
DIMS(tup) = DIMS(batch)

Besides the 'IN [a,b]' form, there is the '= expr' form, which allows any
arithmetic binary operation involving +,-,*,//,//^,% and parentheses, and
follows the usual precedence rules.  (This is likely overkill, but whatever)
For the RANK constraints, the terminal values may be integers or other RANK
terms (see parse.py:168 rcons_factor).  For DIMS, they may be integer, rank, or
DIMS, (see parse.py:197 dcons_factor).

When these constraints are parsed, nothing is returned.  Rather, the parser
calls either tup.add_gen_expr() with the dims constraint, or
tup.add_rank_expr() with the rank constraint.  This means the order of the
constraints in the .et file don't matter.  

The constraints can be divided into two groups.  Rank-only constraints, in
which the rank of one or more EinTups are constrained.  And, Dims-containing
constraints.  The runtime automatically generates all possible combinations of
ranks in [0, 10) x N, with N being the number of EinTups.  It retains only
those combinations which satisfy the Rank-only constraints.

Then, it generates Dims for each, using the Dims-containing constraints.  These
constraints can be Dims-IntExpr, Dims-Rank, or Dims-Dims.  The Dims-Dims
constraints induce a graph on the set of primary EinTups, and cannot form any
cycle.  Because of this, the system is able to generate dims for each primary
EinTup using DFS on this graph.  A node (Shape) is 'visited' when its Dims are
generated via gen_dims(), and thus it returns True for has_dims().

Dims-Dims constraints must have matching rank.  However, there currently is no
clean way to determine that two such Dims have matching rank until the ranks
have been set by Runtime::cycle iterations.

Nested Expression

An Array expression such as `ary[batch,elem,other]`, in which the index list
consists entirely of EinTup names, is called non-nested.  There are two forms
of 'nested' expressions:

ary[batch,indices[fpos,ipos,:],other]
ary[batch,fpos-ipos,other]

In the first form, an actual materialized array called 'indices' appears as an
indexing element.  It is called a 'SliceNode' because it has a single ':' (STAR
index).  The signature for indices might be [fpos, ipos, elem] and so, accessed
with a ':' node, the values for a given setting for fpos and ipos take on the
same rank as elem.  The SliceNode is said to have rank equal to RANK(elem).

In the second case, the expression fpos-ipos becomes instantiated as a
RangeBinOp.  In such an expression, all mentioned EinTups (in this case, 'fpos'
and 'ipos' must have the same rank, and the rank of the RangeBinOp becomes that
rank.  Like the SliceNode, the RangeBinOp produces values according to its
rank.  Both SliceNode and RangeBinOp derive from an otherwise empty class
called Slice, which requires member functions 'rank' and 'get_array'.  Then,
LValueArray and RValueArray may contain zero or one instances of a Slice node
in their index_list.

tf.scatter_nd(indices, updates, shape)

Example:
output[batch,index[ipos,fpos,:],ochan] += tmp[batch,ipos,fpos,ochan]


# Starting shapes:
indices[idx_sig]
output[out_sig]

Remove star_tup from idx_sig
Remove slice_tup from out_sig

fetch_sig is the elements in idx_sig not in out_sig
batch_sig is elements in common
other_sig is elements in out_sig not in idx_sig

target_idx = fetch_sig + [star_tup] 
target_upd = fetch_sig + other_sig
target_out = [slice_tup] + other_sig

# This simply reorders the star_tup to the end
indices[target_idx]

# This reorders the updates to be compatible with scatter_nd (I think)
updates[target_upd]

# This reorders the slice_tup to the front
output[target_out]

So, what is happening is, star_tup is rank 1, and its shape should equal
slice_tup.rank(), because each value in star_tup should index a different
component of slice_tup.



How does scatter_nd work?  

From the docs:

"indices is an integer tensor of shape 'shape'."
(This is not true)

The last dimension of indices can be at most the rank of shape:

indices.shape[-1] <= shape.rank

The last dimension of indices corresponds to indices of elements (if
indices.shape[-1] = shape.rank) or slices (if indices.shape[-1] < shape.rank)
along dimension indices.shape[-1] of shape.

updates is a tensor with shape:

indices.shape[:-1] + shape[indices.shape[-1]:]


Zero-dimensions

When a tensor has a dimension with zero size, I see this error:

2022-07-05 14:35:35.070113: F ./tensorflow/core/util/gpu_launch_config.h:129] Check failed: work_element_count > 0 (0 vs. 0)



SliceBinOp dims calculations

SliceBinOp accepts ops +,-,*,//,//^,%.  It accepts any SliceExpr's as lhs and
rhs.  However, there are some restrictions.  Here is the full table of possible
combinations.  The possible SliceExprs, with some annotation are:

IntSlice     Scalar, Static
RankSlice    Scalar, Static
DimsSlice    Static
EinTupSlice  
ArraySlice
FlattenSlice
SliceBinOp

IntSlice and RankSlice are scalar in that dims() always returns a length-1
array.  IntSlice, RankSlice and DimsSlice are also StaticExprs, and so they
support the value() function as well.  In these cases, dims() always returns
value()+1, because dims() is by definition the exclusive upper bound of any
value which the Slice can produce.



1. Only StaticExprs are allowed as the rhs of operands '//', '//^', and '%'
(perhaps also '*')
2. lhs {+,-} Static:      lhs.dims() op rhs.value()
4. lhs {*,//,//^} Static: ((lhs.dims() - 1) op rhs.value()) + 1
5. lhs % Static:          min(lhs.dims(), rhs.value()) 
6. lhs + rhs:             lhs.dims() + rhs.dims() - 1
7. lhs - rhs:             lhs.dims()
8. Static + rhs:          rhs.dims() + lhs.value()
9. Static - rhs:          lhs.value()
10.Static * rhs:          (lhs.value() * (rhs.dims() - 1)) + 1
9b.Static - Static:       lhs.value() - rhs.value()



lhs   op   rhs






Overview

The system parses the 'program' first.  The program is a list of statements.
This creates AST nodes and also registers EinTups at the moment new names are
parsed.


Parsing

I adopted this technique for parsing parenthesized arithmetic expressions:

expr       : expr + term
           | expr - term
           | term

term       : term * factor
           | term / factor
           | factor

factor     : NUMBER
           | ( expr )

Taken from https://sly.readthedocs.io/en/latest/sly.html#writing-a-parser

This is used for shape_expr, rval_expr and tup_expr in parse.py

