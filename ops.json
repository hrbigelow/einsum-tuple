{
  "gatherNd": {
    "program": [
      "params[b,e] = RANDOM()",
      "indices[b,s,c] = RANDINT(0, DIMS(e)[c])",
      "result[b,s] = params[b,indices[b,s,:]]"
    ],
    "tfcall": {
      "func": "tf.gather_nd",
      "args": {
        "params": "params",
        "indices": "indices",
        "batch_dims": "RANK(b)"
      },
      "return-value": "result"
    },
    "constraints": [
      "RANK(b) + RANK(s) < 8",
      "RANK(b) + RANK(e) < 8",
      "RANK(e) > 0",
      "RANK(c) == 1",
      "DIMS(c)[0] == RANK(e)"
    ]
  },
  "matmul": {
    "program": [
      "mat1[b,r,i] = RANDOM(0, 10)",
      "mat2[b,i,c] = RANDOM(0, 10)",
      "result[b,r,c] = mat1[b,r,i] * mat2[b,i,c]"
    ],
    "tfcall": {
      "func": "tf.linalg.matmul",
      "args": {
        "a": "mat1",
        "b": "mat2"
      },
      "return-value": "result"
    },
    "constraints": [
      "RANK(b) < 8",
      "RANK(r) == 1",
      "RANK(i) == 1",
      "RANK(c) == 1"
    ]
  },

  "conv": {
    "program": [
      "input[b,s,i] = RANDOM()",
      "filters[f,i,o] = RANDOM()",
      "output[b,s-f,o] = input[b,s,i] * filters[f,i,o]"
    ],
    "constraints": [
      "RANK(s) == RANK(f)",
      "RANK(s) > 0",
      "RANK(i) > 0",
      "RANK(o) > 0",
      "MIN(s-f) := 0",
      "MAX(s-f) := DIMS(s) - DIMS(f)"
    ],
    "tfcall": {
      "func": "tf.nn.convolution",
      "args": {
        "input": "input",
        "filters": "filters",
        "pad": "VALID"
      },
      "return-value": "output"
    }
  }

}

